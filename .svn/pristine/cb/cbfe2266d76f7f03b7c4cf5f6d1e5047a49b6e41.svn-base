/**
 * 
 * 
 */
package cn.guo.privacyfix;

import java.util.HashMap;

import android.R.integer;
import android.app.Activity;
import android.bluetooth.BluetoothAdapter;
import android.content.ContentResolver;
import android.net.wifi.WifiInfo;
import android.os.Build;
import android.telephony.TelephonyManager;
import android.text.TextUtils;
import android.view.Display;
import android.view.WindowManager;
import de.robv.android.xposed.IXposedHookLoadPackage;
import de.robv.android.xposed.XC_MethodHook;
import de.robv.android.xposed.XSharedPreferences;
import de.robv.android.xposed.XposedBridge;
import de.robv.android.xposed.XposedHelpers;
import de.robv.android.xposed.XC_MethodHook.MethodHookParam;
import de.robv.android.xposed.callbacks.XC_LoadPackage.LoadPackageParam;

/**
 * 
 *
 */
public class MainHook implements IXposedHookLoadPackage {

	private static boolean init = false;
	private XSharedPreferences pre;

	/**
	 * 使用SharedPreferences做共享数据失败
	 * 
	 * @param lpparam
	 */
	public void readData(LoadPackageParam lpparam) {
		if (!init) {
			try {
				pre = new XSharedPreferences(this.getClass().getPackage()
						.getName(), "prefs");
				String ks[] = { "imei", "imsi", "number", "simserial",
						"wifimac", "bluemac", "androidid", "serial", "brand",
						"model", "simOperator", "SSID", "macAddress",
						"version_codes", "release", "resolution_width", "resolution_heidth" ,
						"manufacturer" ,"device"};
				HashMap<String, String> maps = new HashMap<String, String>();
				for (String k : ks) {
					String v = pre.getString(k, null);
					if (TextUtils.isEmpty(v)) {
						XposedBridge.log(k+"的值为空");
						//需要做异常处理
//						break;
					}
					maps.put(k, v);
				}
				if (maps.isEmpty()) {
				} else {
					HookAll(maps, lpparam);
				}
			} catch (Throwable e) {
			}
		} else {
		}
	}

	public void handleLoadPackage(LoadPackageParam lpparam) throws Throwable {
		if ("".equals(lpparam.packageName))// System
		{
//			XposedBridge.log("onstart");
//			readData(lpparam);
			return;
		}
		XposedBridge.log("onstart");
		readData(lpparam);
				// Class<?> classBuild = XposedHelpers.findClass("android.os.Build",
		// lpparam.classLoader);
		// XposedHelpers.setStaticObjectField(classBuild, "MODEL",
		// "lenovo a321t");
		
		
	}

	private void HookAll(final HashMap<String, String> map,
			LoadPackageParam lpparam) {
		try {
			HookMethod(TelephonyManager.class, "getDeviceId", map.get("imei"));
			HookMethod(TelephonyManager.class, "getSubscriberId",
					map.get("imsi"));
			HookMethod(TelephonyManager.class, "getLine1Number",
					map.get("number"));
			HookMethod(TelephonyManager.class, "getSimSerialNumber",
					map.get("simserial"));
			HookMethod(TelephonyManager.class, "getSimOperator",
					map.get("simOperator"));
//			HookMethod(Display.class, "getWidth", Integer.parseInt(map.get("resolution_width")));
//			HookMethod(Display.class, "getHeight", Integer.parseInt(map.get("resolution_heidth")));
			HookMethod(WifiInfo.class, "getMacAddress", map.get("wifimac"));
			HookMethod(WifiInfo.class, "getSSID", map.get("SSID"));
			HookMethod(WifiInfo.class, "getBSSID", map.get("macAddress"));
			HookMethod(BluetoothAdapter.class, "getAddress", map.get("bluemac"));
		} catch (Throwable e) {
			XposedBridge.log(e.getMessage()+"error"+map.get("resolution_heidth"));
		}
		try {
			XposedHelpers.findAndHookMethod(
					android.provider.Settings.Secure.class, "getString",
					new Object[] { ContentResolver.class, String.class,
							new XC_MethodHook() {
								protected void afterHookedMethod(
										MethodHookParam param) throws Throwable {
									if (param.args[1] == "android_id") {
										param.setResult(map.get("androidid"));
									}
								}
							} });
		} catch (Throwable e) {
			XposedBridge.log("修改 Build 失败!+++findandhookmethod"
					+ e.getMessage());
		}
		try {
			XposedHelpers.findAndHookMethod((Class) Activity.class, "onResume",
					new XC_MethodHook() {
						@Override
						protected void afterHookedMethod(MethodHookParam param)
								throws Throwable {
							pre.reload();
						}
					});
		} catch (NoSuchMethodError e) {
			XposedBridge.log("couldn't hook method " + "onResume");
		}
		Class<?> classBuild = XposedHelpers.findClass("android.os.Build",
				lpparam.classLoader);
		Class<?> classBuild2 = XposedHelpers.findClass(
				"android.os.Build.VERSION", lpparam.classLoader);
		/**
		 * R.id.rsimOperator, R.id.rSSID, R.id.rMacAddress, R.id.rversion_codes,
		 * R.id.rrelease, R.id.rresolution,R.id.rmanufacturer);
		 * 
		 * @param lpparam
		 */
		try {
			XposedHelpers.findField(classBuild, "SERIAL").set(null,
					map.get("serial"));
			XposedHelpers.findField(classBuild, "BRAND").set(null,
					map.get("brand"));
			XposedHelpers.setStaticObjectField(classBuild, "MODEL",
					map.get("model"));
			XposedHelpers.setStaticObjectField(classBuild, "MANUFACTURER",
					map.get("manufacturer"));
			XposedHelpers.setStaticObjectField(classBuild2, "RELEASE",
					map.get("release"));
			XposedHelpers.setStaticObjectField(classBuild2, "SDK",
					map.get("version_codes"));
			XposedHelpers.setStaticObjectField(classBuild2, "SDK_INT",
					Integer.parseInt(map.get("version_codes")));
			XposedHelpers.setStaticObjectField(classBuild, "DEVICE",
					map.get("device"));
		} catch (Throwable e) {
			XposedBridge.log("修改 Build 失败!" + e.getMessage());
		}

	}

	private void HookMethod(final Class cl, final String method,
			final Object result) {
		try {
			XposedHelpers.findAndHookMethod(cl, method,
					new Object[] { new XC_MethodHook() {
						protected void afterHookedMethod(MethodHookParam param)
								throws Throwable {
							param.setResult(result);
						}

					} });
		} catch (Throwable e) {
			XposedBridge.log("修改 Build 失败!+hokkmethod" + e.getMessage());
		}
	}
}
